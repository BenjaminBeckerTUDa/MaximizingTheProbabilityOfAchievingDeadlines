#!/usr/bin/python
# ****************************************************************************
# *  Copyright: National ICT Australia,  2009 - 2010                         *
# *  Developed at the ATP lab, Networked Systems research theme              *
# *  Author(s): Yuriy Tselishchev                                            *
# *  This file is distributed under the terms in the attached LICENSE file.  *
# *  If you do not find this file, copies can be found by writing to:        *
# *                                                                          *
# *      NICTA, Locked Bag 9013, Alexandria, NSW 1435, Australia             *
# *      Attention:  License Inquiry.                                        *
# *                                                                          *
# ***************************************************************************/

import os, sys, commands, getopt, re
from optparse import OptionParser
			
styles = ["linespoints","histogram","rowstacked","columnstacked"]
col_sh = {	"b":"blue", 			"lb":"light-blue", 		"g":"green", 		"lg":"light-green", 
			"r":"red", 				"o":"orange", 			"y":"yellow", 		"br":"brown",
			"c":"cyan",				"db":"dark-blue",		"dg":"dark-green",	"m":"magenta",
			"lm":"light-magenta", 	"dm":"dark-magenta",	"t":"turquoise",	"v":"violet",
			"p":"purple", 			"pi":"pink",			"dv":"dark-violet",	"dc":"dark-cyan"}

parser = OptionParser(usage="usage: %prog [options]")
parser.add_option("-d","--debug", dest="debug", default=False, action="store_true", help="Debug mode, will display gnuplot commands as they are dispatched")
parser.add_option("-g","--greyscale", dest="grey", default=False, action="store_true", help="Use greyscale colors only")
parser.add_option("-l","--legend", dest="legend", type="string", default="", help="Set legend position, default is 'top right'")
parser.add_option("-o","--output", dest="output", type="string", default="plot.ps", metavar="FILE", help="Select output file, default is 'plot.ps'")
parser.add_option("-s","--style", dest="style", type="string", default="linespoints", help="Plot style to be used, supported values: " + ", ".join(styles))
parser.add_option("--color-opacity", dest="opacity", type="float", default=0.65, help="Set box colour opacity, default is 0.65")
parser.add_option("--colors", dest="colors", type="string", help="Specify a comma-seprated list of colors to be used in the plot, or use '?' for full list available, arbitrary RGB values are supported with #RRGGBB format")
parser.add_option("--gnuplot", dest="gnuplot", type="string", default="gnuplot", help="Path to gnuplot executable, default is 'gnuplot'")
parser.add_option("--hist-box", dest="boxwidth", type="float", default="0.9", help="Set boxwidth of histogram columns")
parser.add_option("--hist-gap", dest="histgap", type="float", help="Set gap between histogram columns")
parser.add_option("--linewidth", dest="linewidth", type="float", default="1", help="Set linewidth, only with linespoints style")
parser.add_option("--ratio", dest="ratio", type="float", help="Set aspect ratio of the graph")
parser.add_option("--rotate", dest="rotate", type="float", help="Set xtics rotation, in degrees (e.g. 45)")
parser.add_option("--xrange", dest="xrange", type="string", metavar="[MIN:]MAX", help="Set range of x-axis")
parser.add_option("--xtitle", dest="xtitle", type="string", help="Set title of x-axis, will be determined automatically by default")
parser.add_option("--yrange", dest="yrange", type="string", metavar="[MIN:]MAX", help="Set range of y-axis")
parser.add_option("--ytitle", dest="ytitle", type="string", help="Set title of y-axis, not displayed by deafult")

options,args = parser.parse_args()

lines = sys.stdin.readlines()

if options.colors and options.colors == '?':
	f = os.popen(options.gnuplot,'w')
	print >>f, "show palette colornames"
	f.flush()
	f.close()
	print "\tList of color shortcuts"
	for c in sorted(col_sh):
		print " ", c, "\t", col_sh[c]
	sys.exit(0)

title = ""
extratitle = []
fulltitle = ""
xtitle = ""
xlabels = []
labels = []
table = []
datasets = 0
ci = 0
plot_all = -1
table_all = {}

def extract_common(llist):
	common_l = []
	common_t = []
	raw = []
	raw_extra = []
	result = []
	raw_result = []
	maxlen = 0	
	
	for l in llist:
		l = l.strip().replace("\"","")
		if len(l) < 1: continue
		raw_result.append(l)
		l = l.split(",")
		if maxlen == -1: continue
		elif maxlen == 0: 
			maxlen = len(l)
			for i in l: raw.append([i])
		elif maxlen != len(l):
			maxlen = -1
		else:
			for i in range(len(l)):	raw[i].append(l[i])
	
	if maxlen == -1: return raw_result,"",[]

	for l in raw:
		common = os.path.commonprefix(l)
		if common == l[0]: common_t.append(common)
		elif "=" in common:
			common_l.append(common.split("=",1)[0])
			if len(result) == 0:
				for i in l: result.append(i.split("=",1)[1])
			else:
				for i in range(len(l)):
					result[i] = result[i] + "," + l[i].split("=",1)[1]
		else: raw_extra.append(l)

	for l in raw_extra:
		if len(result) == 0: result = l
		else:
			for i in range(len(l)):
				result[i] = result[i] + "," + l[i]
	
	if len(result):
		return result,",".join(common_l),common_t
	else:
		return raw_result,"",[]

for line in lines:
	m = re.match(r"[-+ \n]+$",line)
	if (m): continue
	data = line.strip().strip("|").split("|")
	if len(data) == 0: continue
	if len(data) == 1:
		if not title:
			fulltitle = data[0]
			title = data[0].split(":")[1]
		elif data[0] == fulltitle + " - confidence intervals":
			if options.style == "linespoints":
				ci = datasets
				xlabels = []
			else:
				print "CastaliaPlot: WARNING confidence intervals can only be plotted with linespoints style"
				break
		elif data[0] == fulltitle + " - all values":
			if options.style == "linespoints":
				plot_all = 0
				xlabels = []
			else:
				print "CastaliaPlot: WARNING all values can only be plotted with linespoints style"
				break
		else:
			quit("\nCastaliaPlot: ERROR unable to plot this table or bad input syntax at\n\t"+data[0])
	elif title and not xlabels:
		xlabels,xtitle,extra = extract_common(data)
		extratitle.extend(extra)
	elif plot_all != -1:
		if len(data) <= len(xlabels): 
			print "CastaliaPlot: WARNING unexpected array length of all values plot"
			plot_all = -1
			break
		l,n = data.pop(0).strip().split(" ",1)
		n = int(n)
		if labels[plot_all] != l: plot_all = plot_all + 1
		if labels[plot_all] != l: 
			print "CastaliaPlot: WARNING unexpected label in the table '" + l + "'"
			plot_all = -1
			break
		for i in range(len(data)):
			if i not in table_all: table_all[i] = []
			t = table_all[i]
			if n >= len(t): t.append([data[i].strip()])
			else: t[n].append(data[i].strip())
	else:
		datasets += 1
		if len(data) > len(xlabels): labels.append(data.pop(0).strip())
		else: labels.append("row " + str(datasets))
		row = 0
		for d in data:
			if row >= len(table): table.append([])
			table[row].append(d.strip())
			row += 1

labels,ltitle,extra = extract_common(labels)
extratitle.extend(extra)

if len(extratitle):
	title = title + " (" + ",".join(extratitle) + ")" 

if options.style == "rowstacked":
	tmp = ltitle;
	ltitle = xtitle;
	xtitle = tmp;

fname = "data" + str(os.getpid()) + ".dat"
fr = open(fname,"w")

def myprint(fr,line):
	if options.debug:
		print line
	print >>fr, line

if options.debug:
	print("\n===DEBUG: input data file===")

xtics_add = []
for x in range(len(xlabels)):
	if options.style != "rowstacked":
		xtics_add.append('"' + xlabels[x] + '" ' + str(x) + " 0") 
		myprint(fr, str(x) + " " + " ".join(table.pop(0)))
	else:
		myprint(fr, "\"" + xlabels[x] + "\" " + " ".join(table.pop(0)))
if plot_all != -1:
	for n in table_all:
		for d in table_all[n]:
			myprint(fr, str(n) + " " + " ".join(d))		
fr.close()

if options.style not in styles:
	quit("\nERROR: unknown style, supported values: " + ", ".join(styles))

name,ext = options.output.rsplit(".",1)
if ext != 'ps' and ext != 'eps':
	name += ".ps"
else:
	name = options.output

if options.debug:
	print("\n===DEBUG: gnuplot commands===")	
f = os.popen(options.gnuplot,'w')
if options.grey:
	myprint(f, "set term postscript enhanced")
	myprint(f, "set palette grey")
else:
	myprint(f, "set term postscript enhanced color")
	
myprint(f, "set output \"" + name + "\"")
myprint(f, "set title \"" + title + "\"")

if options.ratio:
	myprint(f, "set size ratio " + options.ratio)
if options.xrange:
	if ":" in options.xrange: 
		rmin,rmax = options.xrange.split(":")
	else:
		rmin = "0"
		rmax = options.xrange
	myprint(f, "set xrange ["+rmin+":"+rmax+"]")
if options.yrange:
	if ":" in options.yrange: 
		rmin,rmax = options.yrange.split(":")
	else:
		rmin = "0"
		rmax = options.yrange
	myprint(f, "set yrange ["+rmin+":"+rmax+"]")
	
if options.rotate:
	myprint(f, "set xtics nomirror rotate by -" + str(options.rotate) + " (" + ', '.join(xtics_add) + ")")
elif len(xtics_add): myprint(f, "set xtics (" + ', '.join(xtics_add) + ")")
key = "set key "
if ltitle != "": key += "title \"" + ltitle + "\" "
if ltitle != "" or options.legend: key += options.legend
if options.xtitle: myprint(f, "set xlabel '" + options.xtitle + "'")
elif xtitle != "": myprint(f, "set xlabel '" + xtitle + "'")
if options.ytitle: myprint(f, "set ylabel '" + options.ytitle + "'")

if options.style == "linespoints":
	myprint(f, "set style data linespoints")
else:
	myprint(f, "set style data histogram")
	if options.style == "histogram":
		if options.histgap:
			myprint(f, "set style histogram cluster gap " + str(options.histgap))
		elif len(labels) > 1:
			myprint(f, "set style histogram cluster gap 1")
		else:
			myprint(f, "set style histogram cluster gap 0")
	elif options.style == "rowstacked":
		myprint(f, "set style histogram columnstacked")
	elif options.style == "columnstacked":
		myprint(f, "set style histogram rowstacked")
	if options.grey:
		myprint(f, "set style fill pattern border -1")
	else:
		myprint(f, "set style fill solid " + str(options.opacity) + " noborder")
	myprint(f, "set boxwidth " + str(options.boxwidth))

colors = []
if options.colors and not options.grey:
	myprint(f, "set style increment user")
	colors = options.colors.split(",")
	for i in range(len(colors)):
		if colors[i] in col_sh:
			colors[i] = col_sh[colors[i]]
		elif len(colors[i]) < 3:
			print "\nCastaliaPlot: WARNING invalid color '" + colors[i] + "'"
			continue
		myprint(f, "set style line " + str(i+1) + " lt rgb \"" + colors[i] + "\"")

plots = []
plots_ci = []
plots_all = []
if options.style == "rowstacked":
	for i in range(0,len(labels)):
		if i == 0: plots.append("using " + str(i+2) + ":key(1) title \"" + labels[i] + "\"")
		else: plots.append("using " + str(i+2) + " title \"" + labels[i] + "\"")
else:
	for i in range(0,len(labels)):
		if options.style == "linespoints":
			if ci != 0 and i >= ci:
				plots_ci.append("using 1:" + str(i-ci+2) + ":" + str(i+2) + " notitle with yerrorbars lw " + str(options.linewidth))
			else:
				plots.append("using 1:" + str(i+2) + " title \"" + labels[i] + "\" lw " + str(options.linewidth))
		else:
			plots.append("using " + str(i+2) + " title \"" + labels[i] + "\"")
		if plot_all != -1 and (ci == 0 or i < ci):
			plots_all.append("using 1:" + str(i+2) + " notitle with points")

if len(plots_ci) or len(plots_all):
	myprint(f, "set multiplot")
	myprint(f, "unset key")
	if not options.yrange: myprint(f, "set yrange [] writeback")
	if not options.xrange: myprint(f, "set xrange [] writeback")
	
if len(plots_all):
	myprint(f, "set datafile missing '-'")
	plot_extra = "every ::" + str(len(xlabels)) + " "
	myprint(f, "plot './" + fname + "' " + plot_extra + (", '' " + plot_extra).join(plots_all))
	plot_extra = "every ::::" + str(len(xlabels) - 1) + " "
else:
	plot_extra = ""

if len(plots_ci):
	if len(plots_all):
		if not options.yrange: myprint(f, "set yrange restore")
		if not options.xrange: myprint(f, "set xrange restore")
	myprint(f, "plot './" + fname + "' " + plot_extra + (", '' " + plot_extra).join(plots_ci))

if len(plots_ci) or len(plots_all):
	if not options.yrange: myprint(f, "set yrange restore")
	if not options.xrange: myprint(f, "set xrange restore")
myprint(f, key)
myprint(f, "plot './" + fname + "' " + plot_extra + (", '' " + plot_extra).join(plots))

if len(plots_ci) or plot_all != -1:
	myprint(f, "unset multiplot")

f.flush()
f.close()

if name != options.output:
	r = commands.getoutput("convert -rotate 90 " + name + " " + options.output + " 2>&1")
	commands.getoutput("rm " + name)	
else:
	r = ""

commands.getoutput("rm " + fname)
if r and r != "":
	quit("\nCastaliaPlot: ERROR\n" + r)
	


