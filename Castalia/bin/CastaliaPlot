#!/usr/bin/python
# ****************************************************************************
# *  Copyright: National ICT Australia,  2009 - 2010                         *
# *  Developed at the ATP lab, Networked Systems research theme              *
# *  Author(s): Yuriy Tselishchev                                            *
# *  This file is distributed under the terms in the attached LICENSE file.  *
# *  If you do not find this file, copies can be found by writing to:        *
# *                                                                          *
# *      NICTA, Locked Bag 9013, Alexandria, NSW 1435, Australia             *
# *      Attention:  License Inquiry.                                        *
# *                                                                          *
# ***************************************************************************/

import os, sys, commands, getopt, re
from optparse import OptionParser

styles = ["linespoints","histogram","rowstacked","columnstacked"]

parser = OptionParser(usage="usage: %prog [options]")
parser.add_option("-d","--debug", dest="debug", default=False, action="store_true", help="Debug mode, will display gnuplot commands as they are dispatched")
parser.add_option("-g","--greyscale", dest="grey", default=False, action="store_true", help="Use greyscale colors only")
parser.add_option("-l","--legend", dest="legend", type="string", default="", help="Set legend position (passed to gnuplot directly with 'set key')")
parser.add_option("-o","--output", dest="output", type="string", default="plot.ps", metavar="FILE", help="Select output file, default is 'plot.ps'")
parser.add_option("-s","--style", dest="style", type="string", default="linespoints", help="Plot style to be used, supported values: " + ", ".join(styles))
parser.add_option("--gnuplot", dest="gnuplot", type="string", default="gnuplot", help="Path to gnuplot executable, default is 'gnuplot'")
parser.add_option("--histogram-gap", dest="histgap", type="string", default="1", help="Set gap between histogram columns")
parser.add_option("--xrange", dest="xrange", type="string", metavar="[MIN:]MAX", help="Set range of x-axis")
parser.add_option("--yrange", dest="yrange", type="string", metavar="[MIN:]MAX", help="Set range of y-axis")
parser.add_option("--xtics", dest="xtics", type="string", help="Set xtics (passed to gnuplot directly with 'set xtics')")
parser.add_option("--xtitle", dest="xtitle", type="string", help="Set title of x-axis, will be determined automatically by default")
parser.add_option("--ytitle", dest="ytitle", type="string", help="Set title of y-axis, not displayed by deafult")
(options,args) = parser.parse_args()

lines = sys.stdin.readlines()
title = ""
fulltitle = ""
xtitle = ""
xlabels = []
labels = []
table = []
datasets = 0
ci = 0

def extract_common(llist):
	common = ""
	result = []
	for l in llist:
		l = l.strip().replace("\"","")
		if len(l) < 1: continue
		m = re.match(r"^([^\=]+)\=([^\=]+)$",l)
		if (m):
			if common == "":
				common = m.group(1)
			elif common != m.group(1):
				common = ""
				break
			result.append(m.group(2))
		else:
			break
	if common == "":
		result = []
		for l in llist:
			l = l.strip()
			if len(l) > 0:
				result.append(l)
	else:
		common = common.split(",")[-1]
	return result,common

for line in lines:
	m = re.match(r"[-+ \n]+$",line)
	if (m): continue
	data = line.strip().strip("|").split("|")
	if len(data) == 0: continue
	if len(data) == 1:
		if not title:
			fulltitle = data[0]
			title = data[0].split(":")[1]
		elif data[0] == fulltitle + " - confidence intervals":
			ci = datasets
			xlabels = []
		else:
			quit("\nERROR: unable to plot this table or bad input syntax\n")
	elif title and not xlabels:
		xlabels,xtitle = extract_common(data)
	else:
		datasets += 1
		if len(data) > len(xlabels):
			labels.append(data.pop(0).strip())
		else:
			labels.append("row " + str(datasets))
		row = 0
		for d in data:
			if row >= len(table): table.append([])
			table[row].append(d.strip())
			row += 1

labels,ltitle = extract_common(labels)

if options.style == "rowstacked":
	tmp = ltitle;
	ltitle = xtitle;
	xtitle = tmp;

fname = "data" + str(os.getpid()) + ".dat"
fr = open(fname,"w")

def myprint(fr,line):
	if options.debug:
		print line
	print >>fr, line

if options.debug:
	print("\n===DEBUG: input data file===")

myprint(fr, "title \"" + "\" \"".join(labels) + "\"")
while len(xlabels) > 0:
	myprint(fr, "\"" + xlabels.pop(0) + "\" " + " ".join(table.pop(0)))
fr.close()

if options.style not in styles:
	quit("\nERROR: unknown style, supported values: " + ", ".join(styles))

name,ext = options.output.split(".")
if ext != 'ps' and ext != 'eps':
	name += ".ps"
else:
	name = options.output

if options.debug:
	print("\n===DEBUG: gnuplot commands===")	
f = os.popen(options.gnuplot,'w')
if options.grey:
	myprint(f, "set term postscript enhanced")
	myprint(f, "set palette grey")
else:
	myprint(f, "set term postscript enhanced color")
	
myprint(f, "set output \"" + name + "\"")
myprint(f, "set title \"" + title + "\"")
if options.xrange:
	rmin,rmax = options.xrange.split(":")
	if rmax: myprint(f, "set xrange ["+rmin+":"+rmax+"]")
	else: myprint(f, "set xrange [0:"+rmin+"]")
if options.yrange:
	rmin,rmax = options.yrange.split(":")
	if rmax: myprint(f, "set yrange ["+rmin+":"+rmax+"]")
	else: myprint(f, "set yrange [0:"+rmin+"]")
if options.xtics: myprint(f, "set xtics " + options.xtics)
#elif: myprint(f, "set xtics nomirror rotate by -45")
key = "set key "
if ltitle != "": key += "title \"" + ltitle + "\" "
if ltitle != "" or options.legend: myprint(f, key + options.legend)
if options.xtitle: myprint(f, "set xlabel '" + options.xtitle + "'")
elif xtitle != "": myprint(f, "set xlabel '" + xtitle + "'")
if options.ytitle: myprint(f, "set ylabel '" + options.ytitle + "'")

if options.style == "linespoints":
	myprint(f, "set style data linespoints")
else:
	myprint(f, "set style data histogram")
	if options.style == "histogram":
		myprint(f, "set style histogram cluster gap " + options.histgap)
	elif options.style == "rowstacked":
		myprint(f, "set style histogram columnstacked")
	elif options.style == "columnstacked":
		myprint(f, "set style histogram rowstacked")
	if options.grey:
		myprint(f, "set style fill pattern border -1")
	else:
		myprint(f, "set style fill solid 0.5 noborder")

plots = []
if options.style == "rowstacked":
	for i in range(0,len(labels)):
		if i == 0: plots.append("using " + str(i+2) + ":key(1) ti col")
		else: plots.append("using " + str(i+2) + " ti col")
else:
	for i in range(0,len(labels)):
		if ci != 0 and i >= ci:
			break;
			plots.append("using :" + str(i-ci+2) + ":" + str(i+1) + ":xtic(1) notitle with yerrorbars")
		else:
			plots.append("using " + str(i+2) + ":xtic(1) title col")	

myprint(f, "plot './" + fname + "' " + ", '' ".join(plots))

f.flush()
f.close()

if name != options.output:
	r = commands.getoutput("convert -rotate 90 " + name + " " + options.output + " 2>&1")
	commands.getoutput("rm " + name)	
else:
	r = ""

commands.getoutput("rm " + fname)
if r and r != "":
	quit("\nERROR:\n" + r)
	


