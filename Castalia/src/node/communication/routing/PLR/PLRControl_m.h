//
// Generated file, do not edit! Created by nedtool 4.6 from src/node/communication/routing/PLR/PLRControl.msg.
//

#ifndef _PLRCONTROL_M_H_
#define _PLRCONTROL_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>src/node/communication/routing/PLR/PLRControl.msg:13</tt> by nedtool.
 * <pre>
 * enum PLRControlDef
 * {
 * 
 *     DELAY = 1;
 *     FAIL = 2;
 *     PDR = 3;
 * }
 * </pre>
 */
enum PLRControlDef {
    DELAY = 1,
    FAIL = 2,
    PDR = 3
};

/**
 * Class generated from <tt>src/node/communication/routing/PLR/PLRControl.msg:19</tt> by nedtool.
 * <pre>
 * message PLRControlMessage
 * {
 *     int PLRControlMessageKind @enum(PLRControlDef);
 *     double delay;
 *     double pdr;
 *     int txAddr;
 * }
 * </pre>
 */
class PLRControlMessage : public ::cMessage
{
  protected:
    int PLRControlMessageKind_var;
    double delay_var;
    double pdr_var;
    int txAddr_var;

  private:
    void copy(const PLRControlMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PLRControlMessage&);

  public:
    PLRControlMessage(const char *name=NULL, int kind=0);
    PLRControlMessage(const PLRControlMessage& other);
    virtual ~PLRControlMessage();
    PLRControlMessage& operator=(const PLRControlMessage& other);
    virtual PLRControlMessage *dup() const {return new PLRControlMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getPLRControlMessageKind() const;
    virtual void setPLRControlMessageKind(int PLRControlMessageKind);
    virtual double getDelay() const;
    virtual void setDelay(double delay);
    virtual double getPdr() const;
    virtual void setPdr(double pdr);
    virtual int getTxAddr() const;
    virtual void setTxAddr(int txAddr);
};

inline void doPacking(cCommBuffer *b, PLRControlMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, PLRControlMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _PLRCONTROL_M_H_

