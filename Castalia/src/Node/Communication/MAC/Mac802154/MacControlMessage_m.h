//
// Generated file, do not edit! Created by opp_msgc 4.0 from src/Node/Communication/MAC/Mac802154/MacControlMessage.msg.
//

#ifndef _MACCONTROLMESSAGE_M_H_
#define _MACCONTROLMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0400
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Enum generated from <tt>src/Node/Communication/MAC/Mac802154/MacControlMessage.msg</tt> by opp_msgc.
 * <pre>
 * enum MAC_ControlMessageType
 * {
 *     MAC_SELF_TIMER = 2020;
 *     MAC_SELF_CARRIER_SENSE = 2021;
 *     
 *     
 *     MAC_2_RADIO_ENTER_SLEEP = 2000;
 *     MAC_2_RADIO_ENTER_LISTEN = 2001;
 *     MAC_2_RADIO_ENTER_TX = 2002;
 * 
 *     
 *     MAC_2_RADIO_CHANGE_TX_MODE = 2003;
 * 
 *     
 *     MAC_2_RADIO_CHANGE_POWER_LEVEL = 2004;
 * 
 *     
 *     MAC_2_RADIO_SENSE_CARRIER = 2005;
 *     MAC_2_RADIO_SENSE_CARRIER_INSTANTANEOUS = 2015;
 * 
 *     
 *     MAC_SELF_CHECK_TX_BUFFER = 2006;
 *     MAC_SELF_EXIT_EXPECTING_RX = 2007;
 *     MAC_SELF_PERFORM_CARRIER_SENSE = 2008;
 *     MAC_SELF_EXIT_CARRIER_SENSE = 2009;
 *     MAC_SELF_SET_RADIO_SLEEP = 2010;
 *     MAC_SELF_WAKEUP_RADIO = 2011;
 *     MAC_SELF_INITIATE_TX = 2012;
 *     MAC_SELF_POP_BUFFER_AND_SEND_DATA = 2013;
 * 
 *     MAC_2_NETWORK_FULL_BUFFER = 2014;
 * 
 *     
 *     MAC_SELF_SYNC_SETUP = 201;
 *     MAC_SELF_SYNC_CREATE = 202;
 *     MAC_SELF_SYNC_RENEW = 203;
 *     MAC_SELF_FRAME_START = 204;
 *     MAC_SELF_WAKEUP_SILENT = 205;
 *     MAC_SELF_CHECK_TA = 206;
 * 
 *     MAC_TIMEOUT = 210;
 * 
 *     
 *     MAC_SELF_PERFORM_CCA = 301;
 *     MAC_SELF_RESET_TX = 302;
 *     MAC_SELF_BEACON_TIMEOUT = 303;
 *     MAC_SELF_GTS_START = 304;
 * }
 * </pre>
 */
enum MAC_ControlMessageType {
    MAC_SELF_TIMER = 2020,
    MAC_SELF_CARRIER_SENSE = 2021,
    MAC_2_RADIO_ENTER_SLEEP = 2000,
    MAC_2_RADIO_ENTER_LISTEN = 2001,
    MAC_2_RADIO_ENTER_TX = 2002,
    MAC_2_RADIO_CHANGE_TX_MODE = 2003,
    MAC_2_RADIO_CHANGE_POWER_LEVEL = 2004,
    MAC_2_RADIO_SENSE_CARRIER = 2005,
    MAC_2_RADIO_SENSE_CARRIER_INSTANTANEOUS = 2015,
    MAC_SELF_CHECK_TX_BUFFER = 2006,
    MAC_SELF_EXIT_EXPECTING_RX = 2007,
    MAC_SELF_PERFORM_CARRIER_SENSE = 2008,
    MAC_SELF_EXIT_CARRIER_SENSE = 2009,
    MAC_SELF_SET_RADIO_SLEEP = 2010,
    MAC_SELF_WAKEUP_RADIO = 2011,
    MAC_SELF_INITIATE_TX = 2012,
    MAC_SELF_POP_BUFFER_AND_SEND_DATA = 2013,
    MAC_2_NETWORK_FULL_BUFFER = 2014,
    MAC_SELF_SYNC_SETUP = 201,
    MAC_SELF_SYNC_CREATE = 202,
    MAC_SELF_SYNC_RENEW = 203,
    MAC_SELF_FRAME_START = 204,
    MAC_SELF_WAKEUP_SILENT = 205,
    MAC_SELF_CHECK_TA = 206,
    MAC_TIMEOUT = 210,
    MAC_SELF_PERFORM_CCA = 301,
    MAC_SELF_RESET_TX = 302,
    MAC_SELF_BEACON_TIMEOUT = 303,
    MAC_SELF_GTS_START = 304
};

/**
 * Class generated from <tt>src/Node/Communication/MAC/Mac802154/MacControlMessage.msg</tt> by opp_msgc.
 * <pre>
 * message MacControlMessage
 * {
 *     simtime_t sense_carrier_interval;
 *     int radioTxMode;
 *     int powerLevel;
 *     int timerIndex;
 * }
 * </pre>
 */
class MacControlMessage : public cMessage
{
  protected:
    simtime_t sense_carrier_interval_var;
    int radioTxMode_var;
    int powerLevel_var;
    int timerIndex_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MacControlMessage&);

  public:
    MacControlMessage(const char *name=NULL, int kind=0);
    MacControlMessage(const MacControlMessage& other);
    virtual ~MacControlMessage();
    MacControlMessage& operator=(const MacControlMessage& other);
    virtual MacControlMessage *dup() const {return new MacControlMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual simtime_t getSense_carrier_interval() const;
    virtual void setSense_carrier_interval(simtime_t sense_carrier_interval_var);
    virtual int getRadioTxMode() const;
    virtual void setRadioTxMode(int radioTxMode_var);
    virtual int getPowerLevel() const;
    virtual void setPowerLevel(int powerLevel_var);
    virtual int getTimerIndex() const;
    virtual void setTimerIndex(int timerIndex_var);
};

inline void doPacking(cCommBuffer *b, MacControlMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, MacControlMessage& obj) {obj.parsimUnpack(b);}


#endif // _MACCONTROLMESSAGE_M_H_
