#!/usr/bin/perl

use strict;

my $multiplication = 10;

my $constants = {
    "SN.node[*].networkInterface.Network.maxNetFrameSize" => 2200,
    "SN.node[*].networkInterface.MAC.maxMACFrameSize" => 2400,
    "SN.node[*].networkInterface.Radio.maxPhyFrameSize" => 2600,
    "SN.node[*].networkInterface.MAC.macMaxFrameRetries" => 2,
    "SN.node[*].networkInterface.Radio.txPowerLevelUsed" => 2,
    "SN.wirelessChannel.pathLossMapFile" => "\"./pathLossMap.txt\"",
    "SN.wirelessChannel.temporalModelParametersFile" => "\"./TemporalModelBAN.txt\"",
};

my $randoms = [ "seed-1-mt", "seed-2-mt", "seed-4-mt", "seed-5-mt" ];

my $conf = [ 

    { 	params => { 	"SN.node[*].networkInterface.Radio.txPowerLevelUsed" => [0..4] },
	constants => {  "SN.node[3].nodeApplication.packet_rate" => 10 } 
    },
    { 	params => { 	"SN.node[*].networkInterface.MAC.macMaxFrameRetries" => [1,2,3] },
	constants => {  "SN.node[3].nodeApplication.packet_rate" => 10 } 
    },
    { 	params => { 	"SN.node[*].networkInterface.Radio.txPowerLevelUsed" => [0,1,2,3,4],
			"SN.node[*].nodeApplication.latencyHistogramMax" => [200,200,2000,2000,2000] },
	constants => {  "SN.node[3].nodeApplication.packet_rate" => 50 } 
    },
    { 	params => { 	"SN.node[*].networkInterface.MAC.macMaxFrameRetries" => [1,2,3] },
	constants => {  "SN.node[3].nodeApplication.packet_rate" => 50 } 
    },
    {	params => {	"SN.node[*].nodeApplication.packet_rate" => [25,27,29,31,33,35], },
	constants => { 	"SN.node[*].nodeApplication.latencyHistogramMax" => 2000,
			"SN.wirelessChannel.pathLossMapFile" => "\"\"",
			"SN.wirelessChannel.temporalModelParametersFile" => "\"\"", }
    },
    { 	params => {     "SN.node[*].nodeApplication.packet_rate" => [25,27,29,31,33,35], },
	constants => { 	"SN.node[*].nodeApplication.latencyHistogramMax" => 2000 }
    },
    {   params => {     "SN.node[*].nodeApplication.packet_rate" => [25,27,29,31,33,35], },
	constants => { 	"SN.node[*].nodeApplication.latencyHistogramMax" => 2000,
    			"SN.wirelessChannel.pathLossMapFile" => "\"\"",
			"SN.wirelessChannel.temporalModelParametersFile" => "\"\"", 
			"SN.node[*].networkInterface.MAC.requestGTS" => 3 }
    },
    { 	params => {     "SN.node[*].nodeApplication.packet_rate" => [27,29,31,33], },
	constants => { 	"SN.node[*].nodeApplication.latencyHistogramMax" => 2000,
    			"SN.node[*].networkInterface.MAC.requestGTS" => 3,
    			"SN.node[0].networkInterface.Radio.txPowerLevelUsed" => 0,
    			}
    },
    { 	params => {     "SN.node[*].nodeApplication.packet_rate" => [25,27,29,31,33,35], },
	constants => { 	"SN.node[*].nodeApplication.latencyHistogramMax" => 2000,
    			"SN.node[*].networkInterface.MAC.requestGTS" => 3,
    			"SN.node[*].networkInterface.MAC.macMaxFrameRetries" => 1,
    			"SN.node[0].networkInterface.Radio.txPowerLevelUsed" => 0,
    			}
    },
];

my $result = [];
my $breakdown = [];
my $latency = [];

my $ini = {};
my $run = 0;

srand(123);

open(F,'omnetpp.ini') || die $!;
while (my $line = <F>) {
##    if ($line =~ /^\s*$/ || $line =~ /^\s*\#/) { next; }
    if ($line =~ /^\[Run (\d+)\]/) { $run = $1; next; }
    if ($run == 0) { push @{$ini->{body}}, $line; }
    else { push @{$ini->{$run}}, $line unless $line =~ /description/; }
}
close(F) || warn $!;

my $current = 0;
my $total = $multiplication*@$conf;
print "\t0/$total\r";

for my $c (@$conf) {

    my $data = {};
    my $data2 = {};
    my $data3 = {};

    for (1..$multiplication) {

    open(F,'>currentomnetpp.ini') || die $!;
    for (@{$ini->{body}}) {
	print F $_;
    }
    for (@{$ini->{$c->{run}}}) {
	print F $_;
    }
    $run = 1;
    my $rnd = {};
    my @params = keys %{$c->{params}}; my $size = 0;
    for (@params) { 
	if ($size) {
	    if (@{$c->{params}->{$_}} != $size) { die "Bad parameter array size for $_\n"; }
	} else {
	    $size = @{$c->{params}->{$_}};
	}
    }
    for my $i (0..$size-1) {
	print F "\n[Run $run]\n";
	for (@params) {
	    print F "$_ = $c->{params}->{$_}->[$i]\n";
	}
	
	for my $k (keys %$constants) {
	    if ($k ne $c->{param} && !defined($c->{constants}->{$k})) {
		print F "$k = $constants->{$k}\n"; 
	    }
	}
	for my $k (keys %{$c->{constants}}) {
	    print F "$k = $c->{constants}->{$k}\n";
	}
	for my $v (@$randoms) {
	    if (!$rnd->{$v}) { $rnd->{$v} = int(rand(99999)); }
	    print F "$v = $rnd->{$v}\n";
	}
	$run++;
    }
    close(F) || warn $!;
            
    unlink("Castalia-Debug.txt");
    my $r = `../../bin/CastaliaBin -f currentomnetpp.ini`;
#    print $r;
    
    open(F, 'Castalia-Debug.txt') || die $!;
    my $node = -1;
    my $run = 0;
    my $receptions = 0;


=cut
- Transmissions = 2648
   These transmissions resulted in 13240 possible receptions
     at _other_ nodes. From these possible receptions:
      13240 Reached. More specifically
         13240 without interference, 0 despite interference
      0 Failed. More specifically
         0 with interference, 0 despite NO interference
      We also had 0 lost reception opportunities
         (not counted above) due to temporal fades
- Receptions:
    1814 Reached. More specifically
        1814 without interference, 0 despite interference
    658 Failed. More specifically
	658 with interference, 0 despite NO interference
=cut                                                                                     

    while (my $line = <F>) {
	if ($line =~ /breakdown: (\S+) (\d+)/) {
	    my $txt = $1;
	    my $amt = $2;
	    if ($txt =~ /^Success$/) { $data2->{$run}->{"SuccessFirst"} += $amt; }
	    elsif ($txt =~ /Success/) { $data2->{$run}->{"Success"} += $amt; }
	    elsif ($txt =~ /NoAck/) { $data2->{$run}->{"NoAck"} += $amt; }
	    elsif ($txt =~ /CSfail/) { $data2->{$run}->{"CSfail"} += $amt; }
	    else { $data2->{$run}->{$txt} += $amt; }
	}
	if ($line =~ /## Wireless Channel --> Node\[(\d)+\] ##/) { $node = $1; $run++ if $node == 0; }
	if ($node == 0) {
	    if ($line =~ /\s*(\d+) Reached. More specifically/) {		
		$data->{$run}->{recv} += $1 if $receptions;
    	    } elsif ($line =~ /\s*(\d+) with interference, (\d+) despite NO interference/) { 
		$data->{$run}->{interfered} += $1 if $receptions; 
		$data->{$run}->{weak} += $2 if $receptions; 
	    }
	} 
	if ($line =~ /\s*- Transmissions = (\d+)/) { 
	    $receptions = 0;
	    $data->{$run}->{sent} += $1 if $node != 0;
	} elsif ($line =~ /\s*- Receptions/) {
	    $receptions = 1;
	}
    }
    close(F) || warn $!;
    my @lines = split(/\n/, $r);
    $run = 0; my $latency = 1;
    for my $line (@lines) {
	if ($latency) {
	    $latency = 0;
	    next unless $run;
	    my @vals = split(/\s/,$line);
	    $data3->{$run} = [] unless $data3->{$run};
	    for (my $i = 0; $i < @vals; $i++) {
		$data3->{$run}->[$i] += $vals[$i];
	    }
	}
	elsif ($line =~ /Calling finish\(\) at end of Run #(\d+).../) { $run = $1; }
	elsif ($line =~ /total number of packets received is: (\d+)/) { $data->{$run}->{reached} = +$1; }
	elsif ($line =~ /Node \[\d+\] lost packets due to buffer overflow: (\d+)\(MAC\)/) { $data2->{$run}->{overflow} += $1; }
	elsif ($line =~ /Latency historgram from 0 to \d+/) { $latency = 1; }
    }
    
    $current++;
    print "\t$current/$total\r";
    
    }
    
    push @$result, $data;
    push @$breakdown, $data2;
    push @$latency, $data3;
}

print "\n";
for my $data (@$result) {
    print "Received,Interfered,Lost due to fades\n";
    for my $run (sort keys %$data) {
	my $r = $data->{$run};
	$r->{strong} = $r->{sent} - $r->{weak} - $r->{interfered} - $r->{recv};
#	print "$run: total: $r->{total}, reached: $r->{recv}, interfered: $r->{interfered}, weak fades: $r->{weak}, strong fades: $r->{strong}, overflow: $r->{overflow}\n"
	print "$r->{recv},$r->{interfered},$r->{strong}\n";
    }
}

print "\n\n";
for my $data2 (@$breakdown) {
    print "Success on first attempt,Success,No Ack,CSMA fail,Overflow\n";
    for my $run (sort keys %$data2) {
	my $r = $data2->{$run};
	print "$r->{SuccessFirst},$r->{Success},$r->{NoAck},$r->{CSfail},$r->{overflow}\n";
    }
}

print "\n";
for my $data3 (@$latency) {
    for my $run (sort keys %$data3) {
	my $r = $data3->{$run};
	print join(",",@$r), "\n";
    }
    print "\n";
}