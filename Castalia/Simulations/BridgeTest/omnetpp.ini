# ********************************************************************************
# *  Copyright: National ICT Australia, 2009, 2010                               *
# *  Developed at the Networks and Pervasive Computing program                   *
# *  Author(s): Yuriy Tselishchev                                                *
# *  This file is distributed under the terms in the attached LICENSE file.      *
# *  If you do not find this file, copies can be found by writing to:            *
# *                                                                              *
# *      NICTA, Locked Bag 9013, Alexandria, NSW 1435, Australia                 *
# *      Attention:  License Inquiry.                                            *
# *                                                                              *
# *******************************************************************************/

[General]

include ../Parameters/Castalia.ini

sim-time-limit = 600s

include ../Parameters/SensorDevice/Accelerometer.ini

SN.node[*].Communication.RoutingProtocolName = "BypassRoutingModule"
SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2420.txt"

SN.node[*].ApplicationName = "BridgeTest"
SN.node[*].Application.applicationID = "bridgeTest"
SN.node[*].Application.sampleInterval = 50

SN.physicalProcessModuleName = "CarsPhysicalProcess"
SN.physicalProcess[0].description = "Cars"

SN.field_x = 40
SN.field_y = 10
SN.deploymentType = 3
SN.numNodes = 7

SN.node[0].xCoor = 20
SN.node[0].yCoor = 5
SN.node[0].nodeApplication.isSink = true

SN.node[1].xCoor = 0
SN.node[1].yCoor = 0
SN.node[2].xCoor = 0
SN.node[2].yCoor = 10
SN.node[3].xCoor = 20
SN.node[3].yCoor = 0
SN.node[4].xCoor = 20
SN.node[4].yCoor = 10
SN.node[5].xCoor = 40
SN.node[5].yCoor = 0
SN.node[6].xCoor = 40
SN.node[6].yCoor = 10

SN.physicalProcess[0].point1_x_coord = 0
SN.physicalProcess[0].point1_y_coord = 5
SN.physicalProcess[0].point2_x_coord = 40
SN.physicalProcess[0].point2_y_coord = 20

[Config IdealChannel]
SN.wirelessChannel.sigma = 0
SN.wirelessChannel.bidirectionalSigma = 0
SN.wirelessChannel.collisionModel = 0
SN.node[*].Communication.Radio.RadioParametersFile = "../Parameters/Radio/CC2420_IDEALmodulation.txt"

[Config TMAC]
SN.node[*].Communication.MACProtocolName = "TMacModule"

[Config SMAC]
SN.node[*].Communication.MACProtocolName = "TMacModule"
SN.node[*].Communication.MAC.listenTimeout = 61
SN.node[*].Communication.MAC.disableTAextension = true
SN.node[*].Communication.MAC.conservativeTA = false
SN.node[*].Communication.MAC.collisionResolution = 0

[Config JustCarrierSenseMAC]
SN.node[*].Communication.MACProtocolName = "TunableMacModule"

[Config VaryDutyCycleMAC]
SN.node[*].Communication.MACProtocolName = "TunableMacModule"
SN.node[*].Communication.MAC.dutyCycle = ${dutyCycle=0.1,0.3,0.5,0.7,0.9}		# listening / (sleeping+listening)
SN.node[*].Communication.MAC.listenInterval = 100		# ms, cannot be smaller than 0.5ms
SN.node[*].Communication.MAC.beaconIntervalFraction = 1	# beacon_interval / sleeping_interval, if 0 no beacons are sent
SN.node[*].Communication.MAC.probTx = 1					# the probability of a single try of Transmission to happen
SN.node[*].Communication.MAC.numTx = 1					# when we have something to Tx, how many times we try
SN.node[*].Communication.MAC.randomTxOffset = 5			# ms, Tx after time chosen randomly from interval [0..randomTxOffset]
SN.node[*].Communication.MAC.reTxInterval = 40			# ms, Interval between retransmissions, (numTx-1) retransmissions
SN.node[*].Communication.MAC.backoffType = 2 			# 0-->(backoff = sleepinterval), 
														# 1-->(backoff = constant value), 
														# 2-->(backoff = multiplying value - e.g. 1*a, 2*a, 3*a, 4*a ...), 
														# 3-->(backoff = exponential value - e.g. 2, 4, 8, 16, 32...)
SN.node[*].Communication.MAC.backoffBaseValue = 20  	# in ms
SN.node[*].Communication.MAC.randomBackoff = true

[Config VarySampleRate]
SN.node[*].Application.sampleInterval = ${sampleInterval=10,12.5,16.7,25,50,1000}

[Config MultipathRouting]
SN.node[*].Application.reportDestination = "SINK"	//MultipathRingsRouting supports this address
SN.node[*].Communication.RoutingProtocolName = "multipathRingsRoutingModule"
