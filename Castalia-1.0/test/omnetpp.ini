# ***************************************************************************************
# *  Copyright: National ICT Australia,  2006											*
# *  Developed at the Networks and Pervasive Computing program							*
# *  Author(s): Athanassios Boulis, Dimosthenis Pediaditakis							*
# *  This file is distributed under the terms in the attached LICENSE file.				*
# *  If you do not find this file, copies can be found by writing to:					*
# *																						*
# *      NICTA, Locked Bag 9013, Alexandria, NSW 1435, Australia						*
# *      Attention:  License Inquiry.													*
# *																						*
# **************************************************************************************/

#omnetpp.ini for SN-simulator

[General]
preload-ned-files = *.ned @../nedfiles.lst

network = SN  # this line is for Cmdenv, Tkenv will still let you choose from a dialog
output-vector-file = SN-stats.vec
output-scalar-file = SN-stats.sca
debug-on-errors = true

num-rngs = 8				# 8 random number streams (or generators as OMNeT calls them)
					# the first one is used in the ned file

seed-0-mt = 10				# the seeds for each of the RNGs
seed-1-mt = 20
seed-2-mt = 30
seed-3-mt = 40
seed-4-mt = 50
seed-5-mt = 60
seed-6-mt = 70
seed-7-mt = 80

SN.wirelessChannel.rng-0 = 1		# wireless channel has 2 rngs. The first one is associated
SN.wirelessChannel.rng-1 = 2		# with the second physical stream (#1) and the second with the third (#2) 
#SN.physicalProcess[*].rng-0  = 3	# temperature has only 1 rng. It is associated with stream #3 
SN.node[*].rng-0	 = 3		# nodes have 3 rngs. First one to randomize their start time 
SN.node[*].rng-1	 = 4		# The second rng to produces values compared against txProb
SN.node[*].rng-2	 = 5		# The third rng to produces values of the clock drift of the CPU of each node
SN.node[*].rng-3	 = 6		# The forth rng to produces values of the sensor devices' bias
SN.node[*].rng-4	 = 7		# The fifth rng to produces values of the sensor devices' noise


sim-time-limit = 10s



[Cmdenv]
#for non-express mode
express-mode = yes
module-messages = no
event-banners = no		# "yes" outputs all events in the screen
status-frequency = 50
performance display = no
#Add more here!!




[Parameters]

#COMPOUND MODULE: SN (the network)
SN.field_x = 30				# meters
SN.field_y = 30				# meters
SN.numNodes = 16
SN.numPhysicalProcesses = 1
SN.deploymentType = 2			# 1 means a grid deployment
					# 2 means randomized grid deployment (i.e. grid + noise)
					# any other number is the default (uniform random) 


#SIMPLE SUB-MODULE of SN: wirelessChannel
SN.wirelessChannel.pathLossExponent = 4
SN.wirelessChannel.sigma = 4
SN.wirelessChannel.noiseFloor = -105	# dBm
SN.wirelessChannel.PLd0 = 55		# dBm  the Path Loss at d0, should be a positive value
SN.wirelessChannel.d0 = 1		# meters
SN.wirelessChannel.thresholdProb = 0.1
SN.wirelessChannel.txPowerLevels = "0 -1 -3 -5 -7 -10 -15 -25"	# in dBm, first element is the default level
								# max num of levels allowed = 15 



#SIMPLE SUB-MODULE of SN: physicalProcess[0]
SN.physicalProcess[0].multiplicative_k = 0.25	# multiplicative parameter (k)
SN.physicalProcess[0].attenuation_exp_a = 1	# attenuation exponent (a)
SN.physicalProcess[0].sigma = 0.2		# standart deviation to the zero-mean additive gaussian noise (sigma)
SN.physicalProcess[0].max_num_snapshots = 10	# the maximum number of descrete states/snapshots that can be specified in source_X params below
SN.physicalProcess[0].numSources = 1	# number of differemt temperature sources, currently only up to 5 sources are supported
SN.physicalProcess[0].source_0 = "0 16 16 100; 12 16 16 100"	# string showing how sources evolve over time (change in location and value)
SN.physicalProcess[0].source_1 = ""
SN.physicalProcess[0].source_2 = ""
SN.physicalProcess[0].source_3 = ""
SN.physicalProcess[0].source_4 = ""
SN.physicalProcess[0].description = "Fire"


# ----------------------------------------------------------
# ---------  COMPOUND SUB-MODULES of SN: node[]  ------------
# ----------------------------------------------------------



# SIMPLE SUB-MODULE of node: nodeResourceMgr
SN.node[*].nodeResourceMgr.initialEnergy = 10		# joules
SN.node[*].nodeResourceMgr.sigmaCPUClockDrift = 0.0001
SN.node[*].nodeResourceMgr.ramSize = 10240  #10KB in bytes
SN.node[*].nodeResourceMgr.flashSize = -1
SN.node[*].nodeResourceMgr.flashWriteCost = -1
SN.node[*].nodeResourceMgr.flashReadCost = -1
SN.node[*].nodeResourceMgr.imageSize = -1
SN.node[*].nodeResourceMgr.cpuPowerSpeedLevelNames = ""
SN.node[*].nodeResourceMgr.cpuPowerPerLevel = ""
SN.node[*].nodeResourceMgr.cpuSpeedPerLevel = ""
SN.node[*].nodeResourceMgr.cpuInitialPowerLevel = -1



# SIMPLE SUB-MODULE of node: nodeSensorDevMgr 
SN.node[*].nodeSensorDevMgr.numSensingDevices = 1
SN.node[*].nodeSensorDevMgr.pwrConsumptionPerDevice = "0.02"  # in mW
SN.node[*].nodeSensorDevMgr.sensorTypes = "Temperature"
SN.node[*].nodeSensorDevMgr.corrPhyProcess = "0" 	#string-array that holds the index of the Physical process that each one of the sensors monitors
SN.node[*].nodeSensorDevMgr.maxSampleRates = "1"	# 1 sample per sec
SN.node[*].nodeSensorDevMgr.devicesBias = "0.1" 		#the sigmas of the bias of each one of the sensors
SN.node[*].nodeSensorDevMgr.devicesDrift = ""		
SN.node[*].nodeSensorDevMgr.devicesNoise = "0.1"		#the sigmas of the noise of each one of the sensors
SN.node[*].nodeSensorDevMgr.devicesHysterisis = ""



# SIMPLE SUB-MODULE of node: nodeApplication 
SN.node[*].appModuleName = "ApplicationModuleSimple"
SN.node[*].nodeApplication.priority = 1
SN.node[*].nodeApplication.maxAppPacketSize = 20
SN.node[*].nodeApplication.packetHeaderOverhead = 5


# *********************************************
# COMPOUND SUB-MODULE of Node: networkInterface 
# *********************************************


# SIMPLE SUB-MODULE of networkInterface: networkInterface.customRadio
SN.node[*].networkInterface.customRadio.dataRate = 250		# kbps
SN.node[*].networkInterface.customRadio.rxPower = 15    	# mW
SN.node[*].networkInterface.customRadio.listenPower = 14	# mW
SN.node[*].networkInterface.customRadio.sleepPower = 2		# mW
SN.node[*].networkInterface.customRadio.txPowerConsumptionPerLevel = "15 17 19 22 30 40 52 65"  # power consumption per TX level in mW
SN.node[*].networkInterface.customRadio.txPowerLevelUsed = 0	# 0 - .... - N  [index referring to array txPowerLevels if defined outside txPowerLevels limits gets default value 0.]
SN.node[*].networkInterface.customRadio.txModeUsed = 0		# a)0 for CARRIER_SENSE_NONE , b) 1 for CARRIER_SENSE_ONCE_CHECK, c)2 for CARRIER_SENSE_PERSISTENT
SN.node[*].networkInterface.customRadio.bufferSize = 5		# number of MAC frames
SN.node[*].networkInterface.customRadio.maxPhyFrameSize = 31	# in bytes
SN.node[*].networkInterface.customRadio.phyFrameOverhead = 6	# in bytes
SN.node[*].networkInterface.customRadio.delaySleep2Listen = 0.6  #in ms
SN.node[*].networkInterface.customRadio.delayListen2Sleep = 0.3  #in ms
SN.node[*].networkInterface.customRadio.delayTx2Sleep = 0.4	 #in ms
SN.node[*].networkInterface.customRadio.delaySleep2Tx = 0.8	 #in ms
SN.node[*].networkInterface.customRadio.delayListen2Tx = 0.6	 #in ms
SN.node[*].networkInterface.customRadio.delayTx2Listen = 0.3	 #in ms
SN.node[*].networkInterface.customRadio.delayCSValid = 0.5	 #in ms



# SIMPLE SUB-MODULE of networkInterface: networkInterface.customMAC
SN.node[*].networkInterface.macModuleName = "MacModuleSimple"
# ------ These are the parameters you can play with -----------------------------
SN.node[*].networkInterface.customMAC.dutyCycle = 0.85		# sleeping / (sleeping+listening)
SN.node[*].networkInterface.customMAC.listenInterval = 3	# ms, cannot be smaller than 0.5ms
SN.node[*].networkInterface.customMAC.beaconIntervalFraction = 0.85  # beacon_interval / sleeping_interval, if 0 no beacons are sent
SN.node[*].networkInterface.customMAC.probTx = 1		# the probability of a single try of Transmission to happen
SN.node[*].networkInterface.customMAC.numTx = 1			# when we have something to Tx, how many times we try
SN.node[*].networkInterface.customMAC.randomTxOffset = 1	# ms, Tx after time chosen randomly from interval [0..randomTxOffset]
SN.node[*].networkInterface.customMAC.reTxInterval = 100	# ms, Interval between retransmissions, (numTx-1) retransmissions
# ------ These are the parameters you can play with -- END ---------------------------
SN.node[*].networkInterface.customMAC.maxMACFrameSize = 25	# bytes
SN.node[*].networkInterface.customMAC.macFrameOverhead = 5	# bytes
SN.node[*].networkInterface.customMAC.beaconFrameSize = 7	# bytes
SN.node[*].networkInterface.customMAC.ACKFrameSize = 5		# bytes
SN.node[*].networkInterface.customMAC.macBufferSize = 32	#number of messages so that occupy ~ 1MB
SN.node[*].networkInterface.customMAC.carrierSense = true



[Run 1]
description = "4 nodes"
SN.field_x = 30	
SN.field_y = 30
SN.numNodes = 16


